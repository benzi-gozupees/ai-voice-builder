import { Controller, Post, Get, Body, UseGuards, Param,Put,Delete } from '@nestjs/common';
import { KnowledgeService } from './knowledge.service';
import { ApiKeyGuard } from '../common/guards/api-key.guard';

@UseGuards(ApiKeyGuard)
@Controller('knowledge')
export class KnowledgeController {
  constructor(private readonly knowledgeService: KnowledgeService) {}

  @Post('/scrape/:userId')
  async scrapeWebsite(
    @Param('userId') userId: string,
    @Body('url') url: string
  ) {
    return this.knowledgeService.scrapeAndSave(url, userId);
  }

  @Post('/:userId')
  async createKnowledge(
    @Param('userId') userId: string,
    @Body() body: { title: string; content: string; category: string; source?: string }
  ) {
    return this.knowledgeService.createKnowledge(userId, body);
  }

  @Get('/:userId')
  async getByUserId(@Param('userId') userId: string) {
    return this.knowledgeService.getKnowledgeByUserId(userId);
  }
  @Get()
  async getAll() {
    return this.knowledgeService.getAllKnowledge();
  }

  @Put('/:id/:userId')
async updateKnowledge(
  @Param('id') id: string,
  @Param('userId') userId: string,
  @Body() updates: Partial<{ title: string; content: string; favicon: string }>
) {
  return this.knowledgeService.updateKnowledge(id, userId, updates);
}

@Delete('/:id/:userId')
async deleteKnowledge(@Param('id') id: string, @Param('userId') userId: string) {
  return this.knowledgeService.deleteKnowledge(id, userId);
}

@Post('/upload/:userId')
@UseInterceptors(FileInterceptor('file', {
  limits: {
    fileSize: 10 * 1024 * 1024,
  },
  fileFilter: (req, file, cb) => {
    const allowedTypes = [
      'text/plain',
      'application/pdf',
      'application/msword',
      'application/vnd.openxmlformats-officedocument.wordprocessingml.document',
      'text/csv',
      'application/json'
    ];
    
    if (allowedTypes.includes(file.mimetype)) {
      cb(null, true);
    } else {
      cb(new Error('Invalid file type'), false);
    }
  }
}))
async uploadFile(
  @Param('userId') userId: string,
  @UploadedFile() file: Express.Multer.File,
  @Body() body: { category: string }
) {
  return this.knowledgeService.processUploadedFile(userId, file, body.category);
}
}
function FileInterceptor(arg0: string, arg1: { limits: { fileSize: number; }; fileFilter: (req: any, file: any, cb: any) => void; }): any {
  throw new Error('Function not implemented.');
}

