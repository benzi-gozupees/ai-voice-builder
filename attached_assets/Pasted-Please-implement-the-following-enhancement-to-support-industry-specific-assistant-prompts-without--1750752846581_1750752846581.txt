Please implement the following enhancement to support industry-specific assistant prompts — without breaking or affecting the existing assistant creation or dashboard functionality.

📌 Context
Currently, when a new assistant is created (via the /quick-setup flow), a default master prompt is inserted in the assistant creation logic, likely from a static file or inline constant.

We want to dynamically select the prompt based on the SME’s selected industry using database-stored prompt templates. Each industry will have its own voice agent prompt template tailored to its terminology and expectations.

📂 Step 1: Database – Create industry_prompts Table
Create a new table called industry_prompts with this schema:

ts
Copy
Edit
id              UUID (PK)
industry        STRING (unique, lowercase slug: "dental", "wellness", "beauty")
display_name    STRING (human-friendly: "Dental", "Spa & Wellness", etc.)
prompt_template TEXT
is_default      BOOLEAN (only one prompt should be marked as default)
created_at
updated_at
Rules:

The industry name must be unique.

One entry (and only one) should be marked is_default = true. This will be the fallback.

This table will serve both the quick setup UI and the backend assistant creation logic.

🔄 Step 2: Assistant Creation – Update Prompt Logic
Current State (Expected):

The assistant prompt is currently inserted into the payload during the call to createAssistantInVapi().

It is likely imported as a static master prompt or inlined.

Required Refactor:

Instead of using the static prompt:

Capture the industry from the quick setup form submission.

Query the industry_prompts table:

If a prompt exists for that industry → use it.

Else → use the one where is_default = true.

Inject that prompt string into the assistant payload before making the VAPI API call.

💡 Tip: If a function like buildAssistantPrompt() exists, refactor it to accept a dynamic promptTemplate parameter instead of using a static one.

Please comment or console log the source of the selected prompt during creation for testing.

🌍 Step 3: Frontend – Update Quick Setup Industry Dropdown
Add an API route:

ts
Copy
Edit
GET /api/industries
Returns list of { industry, display_name } from industry_prompts.

In the Quick Setup form:

Replace the static industry dropdown with one populated via /api/industries.

Allow selection of only those industries in the DB.

Add “Other” option if needed, which uses the fallback prompt.

Send the selected industry slug to the backend during assistant creation.

🔒 Step 4: Admin Dashboard for Prompt Management
Create a new internal admin dashboard at /admin/prompts with the following:

Table View
List of all industry prompts with:

display_name

industry (slug)

Created / updated timestamps

Actions: Edit, Delete, Set as Default

Add Prompt Form
Fields:

Industry slug (lowercase, e.g. dental)

Display name

Prompt content (textarea)

Checkbox to set as default

Edit Prompt Modal
Allow update of:

Display name

Prompt body

Default flag (only one can be default)

Rules
Prevent deletion of prompt marked is_default = true

Automatically unset previous default if a new default is marked

Add minimal token-based or environment-based protection to restrict this dashboard to internal users

🛡️ Safety Instructions
DO NOT remove or break the current assistant creation logic.

Use clean conditionals to support both:

Existing default prompt fallback

New dynamic prompt from DB if industry is provided

Keep assistant creation fully functional even if no prompt exists for a selected industry (fallback to default)

📌 Optional (for Testing)
Add a console log or debug flag that logs which prompt was used and from which source (industry match or fallback).